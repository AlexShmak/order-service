// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storage

import (
	"context"

	"github.com/AlexShmak/order-service/internal/storage"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUsers creates a new instance of MockUsers. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsers(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsers {
	mock := &MockUsers{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsers is an autogenerated mock type for the Users type
type MockUsers struct {
	mock.Mock
}

type MockUsers_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsers) EXPECT() *MockUsers_Expecter {
	return &MockUsers_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUsers
func (_mock *MockUsers) Create(context1 context.Context, user *storage.User) error {
	ret := _mock.Called(context1, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *storage.User) error); ok {
		r0 = returnFunc(context1, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUsers_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUsers_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - user *storage.User
func (_e *MockUsers_Expecter) Create(context1 interface{}, user interface{}) *MockUsers_Create_Call {
	return &MockUsers_Create_Call{Call: _e.mock.On("Create", context1, user)}
}

func (_c *MockUsers_Create_Call) Run(run func(context1 context.Context, user *storage.User)) *MockUsers_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *storage.User
		if args[1] != nil {
			arg1 = args[1].(*storage.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsers_Create_Call) Return(err error) *MockUsers_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUsers_Create_Call) RunAndReturn(run func(context1 context.Context, user *storage.User) error) *MockUsers_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type MockUsers
func (_mock *MockUsers) GetByEmail(context1 context.Context, s string) (*storage.User, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *storage.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*storage.User, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *storage.User); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsers_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUsers_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockUsers_Expecter) GetByEmail(context1 interface{}, s interface{}) *MockUsers_GetByEmail_Call {
	return &MockUsers_GetByEmail_Call{Call: _e.mock.On("GetByEmail", context1, s)}
}

func (_c *MockUsers_GetByEmail_Call) Run(run func(context1 context.Context, s string)) *MockUsers_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsers_GetByEmail_Call) Return(user *storage.User, err error) *MockUsers_GetByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUsers_GetByEmail_Call) RunAndReturn(run func(context1 context.Context, s string) (*storage.User, error)) *MockUsers_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrders creates a new instance of MockOrders. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrders(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrders {
	mock := &MockOrders{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrders is an autogenerated mock type for the Orders type
type MockOrders struct {
	mock.Mock
}

type MockOrders_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrders) EXPECT() *MockOrders_Expecter {
	return &MockOrders_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockOrders
func (_mock *MockOrders) Create(ctx context.Context, order *storage.Order) error {
	ret := _mock.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *storage.Order) error); ok {
		r0 = returnFunc(ctx, order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrders_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOrders_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - order *storage.Order
func (_e *MockOrders_Expecter) Create(ctx interface{}, order interface{}) *MockOrders_Create_Call {
	return &MockOrders_Create_Call{Call: _e.mock.On("Create", ctx, order)}
}

func (_c *MockOrders_Create_Call) Run(run func(ctx context.Context, order *storage.Order)) *MockOrders_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *storage.Order
		if args[1] != nil {
			arg1 = args[1].(*storage.Order)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrders_Create_Call) Return(err error) *MockOrders_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrders_Create_Call) RunAndReturn(run func(ctx context.Context, order *storage.Order) error) *MockOrders_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockOrders
func (_mock *MockOrders) GetByID(context1 context.Context, s string, n int64) (*storage.Order, error) {
	ret := _mock.Called(context1, s, n)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *storage.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int64) (*storage.Order, error)); ok {
		return returnFunc(context1, s, n)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int64) *storage.Order); ok {
		r0 = returnFunc(context1, s, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = returnFunc(context1, s, n)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrders_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockOrders_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - n int64
func (_e *MockOrders_Expecter) GetByID(context1 interface{}, s interface{}, n interface{}) *MockOrders_GetByID_Call {
	return &MockOrders_GetByID_Call{Call: _e.mock.On("GetByID", context1, s, n)}
}

func (_c *MockOrders_GetByID_Call) Run(run func(context1 context.Context, s string, n int64)) *MockOrders_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrders_GetByID_Call) Return(order *storage.Order, err error) *MockOrders_GetByID_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrders_GetByID_Call) RunAndReturn(run func(context1 context.Context, s string, n int64) (*storage.Order, error)) *MockOrders_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokens creates a new instance of MockTokens. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokens(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokens {
	mock := &MockTokens{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTokens is an autogenerated mock type for the Tokens type
type MockTokens struct {
	mock.Mock
}

type MockTokens_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokens) EXPECT() *MockTokens_Expecter {
	return &MockTokens_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockTokens
func (_mock *MockTokens) Create(context1 context.Context, refreshToken *storage.RefreshToken) error {
	ret := _mock.Called(context1, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *storage.RefreshToken) error); ok {
		r0 = returnFunc(context1, refreshToken)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTokens_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTokens_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - refreshToken *storage.RefreshToken
func (_e *MockTokens_Expecter) Create(context1 interface{}, refreshToken interface{}) *MockTokens_Create_Call {
	return &MockTokens_Create_Call{Call: _e.mock.On("Create", context1, refreshToken)}
}

func (_c *MockTokens_Create_Call) Run(run func(context1 context.Context, refreshToken *storage.RefreshToken)) *MockTokens_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *storage.RefreshToken
		if args[1] != nil {
			arg1 = args[1].(*storage.RefreshToken)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTokens_Create_Call) Return(err error) *MockTokens_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTokens_Create_Call) RunAndReturn(run func(context1 context.Context, refreshToken *storage.RefreshToken) error) *MockTokens_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockTokens
func (_mock *MockTokens) Delete(context1 context.Context, s string) error {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(context1, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTokens_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTokens_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockTokens_Expecter) Delete(context1 interface{}, s interface{}) *MockTokens_Delete_Call {
	return &MockTokens_Delete_Call{Call: _e.mock.On("Delete", context1, s)}
}

func (_c *MockTokens_Delete_Call) Run(run func(context1 context.Context, s string)) *MockTokens_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTokens_Delete_Call) Return(err error) *MockTokens_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTokens_Delete_Call) RunAndReturn(run func(context1 context.Context, s string) error) *MockTokens_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByToken provides a mock function for the type MockTokens
func (_mock *MockTokens) GetByToken(context1 context.Context, s string) (*storage.RefreshToken, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *storage.RefreshToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*storage.RefreshToken, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *storage.RefreshToken); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.RefreshToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokens_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type MockTokens_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockTokens_Expecter) GetByToken(context1 interface{}, s interface{}) *MockTokens_GetByToken_Call {
	return &MockTokens_GetByToken_Call{Call: _e.mock.On("GetByToken", context1, s)}
}

func (_c *MockTokens_GetByToken_Call) Run(run func(context1 context.Context, s string)) *MockTokens_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTokens_GetByToken_Call) Return(refreshToken *storage.RefreshToken, err error) *MockTokens_GetByToken_Call {
	_c.Call.Return(refreshToken, err)
	return _c
}

func (_c *MockTokens_GetByToken_Call) RunAndReturn(run func(context1 context.Context, s string) (*storage.RefreshToken, error)) *MockTokens_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}
